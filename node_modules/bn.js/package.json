{
  "_args": [
    [
      {
        "raw": "bn.js@^5.1.1",
        "scope": null,
        "escapedName": "bn.js",
        "name": "bn.js",
        "rawSpec": "^5.1.1",
        "spec": ">=5.1.1 <6.0.0",
        "type": "range"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui\\node_modules\\browserify-sign"
    ]
  ],
  "_from": "bn.js@^5.1.1",
  "_hasShrinkwrap": false,
  "_id": "bn.js@5.2.0",
  "_location": "/bn.js",
  "_nodeVersion": "15.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bn.js_5.2.0_1614110529702_0.28421628045542735"
  },
  "_npmUser": {
    "name": "fanatid",
    "email": "fanatid@ya.ru"
  },
  "_npmVersion": "7.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bn.js@^5.1.1",
    "scope": null,
    "escapedName": "bn.js",
    "name": "bn.js",
    "rawSpec": "^5.1.1",
    "spec": ">=5.1.1 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/browserify-rsa",
    "/browserify-sign"
  ],
  "_resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
  "_shasum": "358860674396c6997771a9d051fcc1b57d4ae002",
  "_shrinkwrap": null,
  "_spec": "bn.js@^5.1.1",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "browser": {
    "buffer": false
  },
  "bugs": {
    "url": "https://github.com/indutny/bn.js/issues"
  },
  "dependencies": {},
  "description": "Big number implementation in pure javascript",
  "devDependencies": {
    "eslint-plugin-es5": "^1.5.0",
    "mocha": "^8.3.0",
    "standardx": "^7.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw==",
    "shasum": "358860674396c6997771a9d051fcc1b57d4ae002",
    "tarball": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
    "fileCount": 5,
    "unpackedSize": 100370,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgNV9CCRA9TVsSAnZWagAAYAQP/jrVDioNXm4Q5cNdWWQs\nAGiqBmfDNudcbGTgycpwIuXRztaoOVqH2S/OELKXPvlyGa7kcJhYr3TcMyjK\n21WOH0WCSfy81jUKXY+ULuOZtBnqo6CGKxW2FhiMYsyxk1ONVYyqXUe9qbm5\nKJREqA4kF07xTxaH+bnIgb6vlD26pDKp/VpsZ1hsXOkU8XV7KJyKxvOZiqBk\nSdjTMuh4iTntDfwkcSDz9CrBGDVH2m1lGLScZzLIV47rylOQN9WXRzYoh7Nc\n463+CUhT8VHewflAtEBoA8TT5dHkeYlyEcHNXj5BlMPzTqBHYta1YXpC0+kL\nqrGZFrOfxULuBcLcyMdIE3sOnk3tVafic5BmNvnEyBRS1yNk/AuowgO1yBmN\nB9Q7j+HJ0c4UPHQ76zU0A2TCuGNib1IYBq0oqVF4rZeRJMAWs3YUz/FfbgIg\n6rdt5Kk/fp4KYzHx0HyvAJY83ZP9G9OdQixfVlUdA536AelNqsvSdeVwxNle\nYpXVvOKnlWiUBRWjAjhdtKdIbo/d4zJaWsVn4LVEGYKeV/+1fN86jaXGiM65\nJhMOmBMfi06ACuYVyF2ju6L3qe+dUfKxV0uMAoSSrw9B84xOOuBVh0PDT2/C\nQ+Zr4BhRQzyO9Jk8TqqnUg4DUrKOXAYjpDdMFWNqFo7h0aRWZoWH5i0muZHk\nGkeb\r\n=mGBK\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib/bn.js"
  ],
  "gitHead": "5d5532d9fb7192b5d2545bdb2aa024ca1822a313",
  "homepage": "https://github.com/indutny/bn.js",
  "keywords": [
    "BN",
    "Big number",
    "BigNum",
    "Modulo",
    "Montgomery"
  ],
  "license": "MIT",
  "main": "lib/bn.js",
  "maintainers": [
    {
      "name": "cwmma",
      "email": "calvin.metcalf@gmail.com"
    },
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    },
    {
      "name": "fanatid",
      "email": "fanatid@ya.ru"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    }
  ],
  "name": "bn.js",
  "optionalDependencies": {},
  "readme": "# <img src=\"./logo.png\" alt=\"bn.js\" width=\"160\" height=\"160\" />\n\n> BigNum in pure javascript\n\n[![Build Status](https://secure.travis-ci.org/indutny/bn.js.png)](http://travis-ci.org/indutny/bn.js)\n\n## Install\n`npm install --save bn.js`\n\n## Usage\n\n```js\nconst BN = require('bn.js');\n\nvar a = new BN('dead', 16);\nvar b = new BN('101010', 2);\n\nvar res = a.add(b);\nconsole.log(res.toString(10));  // 57047\n```\n\n**Note**: decimals are not supported in this library.\n\n## Notation\n\n### Prefixes\n\nThere are several prefixes to instructions that affect the way the work. Here\nis the list of them in the order of appearance in the function name:\n\n* `i` - perform operation in-place, storing the result in the host object (on\n  which the method was invoked). Might be used to avoid number allocation costs\n* `u` - unsigned, ignore the sign of operands when performing operation, or\n  always return positive value. Second case applies to reduction operations\n  like `mod()`. In such cases if the result will be negative - modulo will be\n  added to the result to make it positive\n\n### Postfixes\n\n* `n` - the argument of the function must be a plain JavaScript\n  Number. Decimals are not supported.\n* `rn` - both argument and return value of the function are plain JavaScript\n  Numbers. Decimals are not supported.\n\n### Examples\n\n* `a.iadd(b)` - perform addition on `a` and `b`, storing the result in `a`\n* `a.umod(b)` - reduce `a` modulo `b`, returning positive value\n* `a.iushln(13)` - shift bits of `a` left by 13\n\n## Instructions\n\nPrefixes/postfixes are put in parens at the of the line. `endian` - could be\neither `le` (little-endian) or `be` (big-endian).\n\n### Utilities\n\n* `a.clone()` - clone number\n* `a.toString(base, length)` - convert to base-string and pad with zeroes\n* `a.toNumber()` - convert to Javascript Number (limited to 53 bits)\n* `a.toJSON()` - convert to JSON compatible hex string (alias of `toString(16)`)\n* `a.toArray(endian, length)` - convert to byte `Array`, and optionally zero\n  pad to length, throwing if already exceeding\n* `a.toArrayLike(type, endian, length)` - convert to an instance of `type`,\n  which must behave like an `Array`\n* `a.toBuffer(endian, length)` - convert to Node.js Buffer (if available). For\n  compatibility with browserify and similar tools, use this instead:\n  `a.toArrayLike(Buffer, endian, length)`\n* `a.bitLength()` - get number of bits occupied\n* `a.zeroBits()` - return number of less-significant consequent zero bits\n  (example: `1010000` has 4 zero bits)\n* `a.byteLength()` - return number of bytes occupied\n* `a.isNeg()` - true if the number is negative\n* `a.isEven()` - no comments\n* `a.isOdd()` - no comments\n* `a.isZero()` - no comments\n* `a.cmp(b)` - compare numbers and return `-1` (a `<` b), `0` (a `==` b), or `1` (a `>` b)\n  depending on the comparison result (`ucmp`, `cmpn`)\n* `a.lt(b)` - `a` less than `b` (`n`)\n* `a.lte(b)` - `a` less than or equals `b` (`n`)\n* `a.gt(b)` - `a` greater than `b` (`n`)\n* `a.gte(b)` - `a` greater than or equals `b` (`n`)\n* `a.eq(b)` - `a` equals `b` (`n`)\n* `a.toTwos(width)` - convert to two's complement representation, where `width` is bit width\n* `a.fromTwos(width)` - convert from two's complement representation, where `width` is the bit width\n* `BN.isBN(object)` - returns true if the supplied `object` is a BN.js instance\n* `BN.max(a, b)` - return `a` if `a` bigger than `b`\n* `BN.min(a, b)` - return `a` if `a` less than `b`\n\n### Arithmetics\n\n* `a.neg()` - negate sign (`i`)\n* `a.abs()` - absolute value (`i`)\n* `a.add(b)` - addition (`i`, `n`, `in`)\n* `a.sub(b)` - subtraction (`i`, `n`, `in`)\n* `a.mul(b)` - multiply (`i`, `n`, `in`)\n* `a.sqr()` - square (`i`)\n* `a.pow(b)` - raise `a` to the power of `b`\n* `a.div(b)` - divide (`divn`, `idivn`)\n* `a.mod(b)` - reduct (`u`, `n`) (but no `umodn`)\n* `a.divmod(b)` - quotient and modulus obtained by dividing\n* `a.divRound(b)` - rounded division\n\n### Bit operations\n\n* `a.or(b)` - or (`i`, `u`, `iu`)\n* `a.and(b)` - and (`i`, `u`, `iu`, `andln`) (NOTE: `andln` is going to be replaced\n  with `andn` in future)\n* `a.xor(b)` - xor (`i`, `u`, `iu`)\n* `a.setn(b, value)` - set specified bit to `value`\n* `a.shln(b)` - shift left (`i`, `u`, `iu`)\n* `a.shrn(b)` - shift right (`i`, `u`, `iu`)\n* `a.testn(b)` - test if specified bit is set\n* `a.maskn(b)` - clear bits with indexes higher or equal to `b` (`i`)\n* `a.bincn(b)` - add `1 << b` to the number\n* `a.notn(w)` - not (for the width specified by `w`) (`i`)\n\n### Reduction\n\n* `a.gcd(b)` - GCD\n* `a.egcd(b)` - Extended GCD results (`{ a: ..., b: ..., gcd: ... }`)\n* `a.invm(b)` - inverse `a` modulo `b`\n\n## Fast reduction\n\nWhen doing lots of reductions using the same modulo, it might be beneficial to\nuse some tricks: like [Montgomery multiplication][0], or using special algorithm\nfor [Mersenne Prime][1].\n\n### Reduction context\n\nTo enable this tricks one should create a reduction context:\n\n```js\nvar red = BN.red(num);\n```\nwhere `num` is just a BN instance.\n\nOr:\n\n```js\nvar red = BN.red(primeName);\n```\n\nWhere `primeName` is either of these [Mersenne Primes][1]:\n\n* `'k256'`\n* `'p224'`\n* `'p192'`\n* `'p25519'`\n\nOr:\n\n```js\nvar red = BN.mont(num);\n```\n\nTo reduce numbers with [Montgomery trick][0]. `.mont()` is generally faster than\n`.red(num)`, but slower than `BN.red(primeName)`.\n\n### Converting numbers\n\nBefore performing anything in reduction context - numbers should be converted\nto it. Usually, this means that one should:\n\n* Convert inputs to reducted ones\n* Operate on them in reduction context\n* Convert outputs back from the reduction context\n\nHere is how one may convert numbers to `red`:\n\n```js\nvar redA = a.toRed(red);\n```\nWhere `red` is a reduction context created using instructions above\n\nHere is how to convert them back:\n\n```js\nvar a = redA.fromRed();\n```\n\n### Red instructions\n\nMost of the instructions from the very start of this readme have their\ncounterparts in red context:\n\n* `a.redAdd(b)`, `a.redIAdd(b)`\n* `a.redSub(b)`, `a.redISub(b)`\n* `a.redShl(num)`\n* `a.redMul(b)`, `a.redIMul(b)`\n* `a.redSqr()`, `a.redISqr()`\n* `a.redSqrt()` - square root modulo reduction context's prime\n* `a.redInvm()` - modular inverse of the number\n* `a.redNeg()`\n* `a.redPow(b)` - modular exponentiation\n\n### Number Size\n\nOptimized for elliptic curves that work with 256-bit numbers.\nThere is no limitation on the size of the numbers.\n\n## LICENSE\n\nThis software is licensed under the MIT License.\n\n[0]: https://en.wikipedia.org/wiki/Montgomery_modular_multiplication\n[1]: https://en.wikipedia.org/wiki/Mersenne_prime\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/bn.js.git"
  },
  "scripts": {
    "lint": "standardx",
    "test": "npm run lint && npm run unit",
    "unit": "mocha --reporter=spec test/*-test.js"
  },
  "version": "5.2.0"
}
