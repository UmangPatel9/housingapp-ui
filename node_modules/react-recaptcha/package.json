{
  "_args": [
    [
      {
        "raw": "react-recaptcha",
        "scope": null,
        "escapedName": "react-recaptcha",
        "name": "react-recaptcha",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui"
    ]
  ],
  "_from": "react-recaptcha@latest",
  "_id": "react-recaptcha@2.3.10",
  "_inCache": true,
  "_location": "/react-recaptcha",
  "_nodeVersion": "10.4.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-recaptcha_2.3.10_1530582000888_0.6824848263891832"
  },
  "_npmUser": {
    "name": "appleboy",
    "email": "appleboy.tw@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-recaptcha",
    "scope": null,
    "escapedName": "react-recaptcha",
    "name": "react-recaptcha",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-recaptcha/-/react-recaptcha-2.3.10.tgz",
  "_shasum": "1f7a001f24ab7e1a323fcf1fd8644afecb56f7da",
  "_shrinkwrap": null,
  "_spec": "react-recaptcha",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui",
  "author": {
    "name": "Bo-Yi Wu"
  },
  "bugs": {
    "url": "https://github.com/appleboy/react-recaptcha/issues"
  },
  "dependencies": {},
  "description": "A react.js reCAPTCHA for Google",
  "devDependencies": {
    "babel-cli": "^6.8.0",
    "babel-core": "^6.3.26",
    "babel-jest": "^14.0.0",
    "babel-loader": "^6.2.1",
    "babel-plugin-add-module-exports": "^0.2.0",
    "babel-plugin-react-transform": "^2.0.0",
    "babel-plugin-transform-runtime": "^6.3.13",
    "babel-polyfill": "^6.3.14",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "babel-runtime": "^6.3.19",
    "enzyme": "^3.3.0",
    "enzyme-adapter-react-15": "^1.0.5",
    "eslint": "^1.10.3",
    "eslint-config-airbnb": "^5.0.0",
    "eslint-plugin-react": "^3.14.0",
    "jest": "^20.0.4",
    "jest-cli": "^20.0.4",
    "jsdom": "^11.6.1",
    "lodash": "^4.17.4",
    "pre-commit": "^1.1.2",
    "prop-types": "^15.5.10",
    "react": "^15.5.4",
    "react-addons-test-utils": "^15.6.2",
    "react-dom": "^15.5.4",
    "react-hot-loader": "^1.3.0",
    "react-test-renderer": "^15.6.2",
    "react-transform-catch-errors": "^1.0.1",
    "react-transform-hmr": "^1.0.1",
    "redbox-react": "^1.2.0",
    "sinon": "^4.2.2",
    "webpack": "^1.12.9",
    "webpack-dev-server": "^1.14.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-IyanbozsYCuHvTYDuskZTIEcRAMG/sdvAu5b29iQWoC8Kd3Zk9WGCv2oNxh6RfGHvSvgHAyaLjmC6ei/yMsJ7g==",
    "shasum": "1f7a001f24ab7e1a323fcf1fd8644afecb56f7da",
    "tarball": "https://registry.npmjs.org/react-recaptcha/-/react-recaptcha-2.3.10.tgz",
    "fileCount": 4,
    "unpackedSize": 19392,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbOtPwCRA9TVsSAnZWagAANpAP/R3C0i75yj8SD89GWLVk\ndniIiEAB9cWstV0PrdgroO4/WUYY0X8BYkuW7keQIC8lhNrQREJ45NYRq28J\n1aAcSRzaZm4vIaRmQuMsfR0AzwH6NZffxQ0GTs8lg7IKnWuVj1+JOmAodHHt\njh5SdubMOnWIIDk9ewEAbJBB/bQHaoDvh/xe0Dfj2m5m9M6ucdyNrEuG8lSM\nnidLm7xpFqP7fjBlF3RmVtf/QYF58b8PygrUOgofhryoSn46iBB+cd5dhfSD\nnL0wLWMSX9uiID8KSUNhfOf3pMbGUUStVREWw5D41tKmST6oIzU4AO5DNyE0\n3X54SzVY7MP0YwLl+53iEQ0C2bGH1BwLAvVpl06zPvnU7n5SEWuH4Oc0uQN8\nn6249eSw2CzRVZBnvknqbyZLtGWYi2WvSchMixOALOq9WvG7PJOhsGGC69YR\nydnkR5nVLEs1SkLbksMtW86CxnU1f60YGSKTjk3LQMk49qVny8daDJaF5y4B\nc2Om4KgpJYuaEG2PTVq0vOvBnP6bdHPoYk59V9DSNsZMRHo5YjWTmEzXPpcY\nq1E36tVhQHU7M+qVM7OM+up3kIxTT8A9gbBqyNEsUw2tnWrO6Q1DJz41SKJ1\nn9EvjsrjtKtxFIDVvi/nD4tH9atdmzNfzNweLheAWkexovcxZ+9e7qEMB2S0\n5FkY\r\n=i1E5\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "e1fec3fe1e40f9c515aa1a69f0a7d4544e731dd0",
  "homepage": "https://github.com/appleboy/react-recaptcha",
  "jest": {
    "transform": {
      ".*": "<rootDir>/node_modules/babel-jest"
    },
    "unmockedModulePathPatterns": [
      "<rootDir>/node_modules/react"
    ],
    "moduleFileExtensions": [
      "js",
      "json",
      "jsx"
    ],
    "testPathIgnorePatterns": [
      "/.yarn-cache/",
      "/node_modules/"
    ],
    "coveragePathIgnorePatterns": [
      "/.yarn-cache/",
      "/node_modules/"
    ],
    "transformIgnorePatterns": [
      "/.yarn-cache/",
      "/node_modules/"
    ]
  },
  "keywords": [
    "react",
    "react-component",
    "reCAPTCHA",
    "component"
  ],
  "license": "BSD",
  "main": "dist/react-recaptcha.js",
  "maintainers": [
    {
      "name": "appleboy",
      "email": "appleboy.tw@gmail.com"
    }
  ],
  "name": "react-recaptcha",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# [react](http://facebook.github.io/react/)-recaptcha\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status](https://travis-ci.org/appleboy/react-recaptcha.svg?branch=master)](https://travis-ci.org/appleboy/react-recaptcha) [![devDependency Status](https://david-dm.org/appleboy/react-recaptcha/dev-status.svg)](https://david-dm.org/appleboy/react-recaptcha#info=devDependencies)\n\n[![NPM](https://nodei.co/npm/react-recaptcha.png?downloads=true&stars=true)](https://nodei.co/npm/react-recaptcha/)\n\n[npm-url]: https://www.npmjs.org/package/react-recaptcha\n[npm-image]: http://img.shields.io/npm/v/react-recaptcha.svg\n[downloads-image]: http://img.shields.io/npm/dm/react-recaptcha.svg\n\nA [react.js]((http://facebook.github.io/react/)) reCAPTCHA for Google. The FREE anti-abuse service. Easy to add, advanced security, accessible to wide range of users and platforms.\n\n# What is reCAPTCHA?\n\nreCAPTCHA is a free service that protects your site from spam and abuse. It uses advanced risk analysis engine to tell humans and bots apart. With the new API, a significant number of your valid human users will pass the reCAPTCHA challenge without having to solve a CAPTCHA (See blog for more details). reCAPTCHA comes in the form of a widget that you can easily add to your blog, forum, registration form, etc.\n\nSee [the details][1].\n\n# Sign up for an API key pair\n\nTo use reCAPTCHA, you need to [sign up for an API key pair][2] for your site. The key pair consists of a site key and secret. The site key is used to display the widget on your site. The secret authorizes communication between your application backend and the reCAPTCHA server to verify the user's response. The secret needs to be kept safe for security purposes.\n\n[1]: https://www.google.com/recaptcha/intro/index.html\n[2]: http://www.google.com/recaptcha/admin\n\n# Installation\n\nInstall package via [node.js](http://nodejs.org/)\n\n```bash\n$ npm install --save react-recaptcha\n```\n\n# Usage\n\nYou can see the [full example](./example) by following steps.\n\n```\n$ npm install\n$ npm start\n```\n\nopen the `http://localhost:3000` in your browser.\n\n# Node support\n\nNode >= v6 is required for this package. Run `node -v` in your command prompt if you're unsure which Node version you have installed.\n\n### Automatically render the reCAPTCHA widget\n\nHtml example code:\n\n```html\n<html>\n  <head>\n    <title>reCAPTCHA demo: Simple page</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"https://www.google.com/recaptcha/api.js\" async defer></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script src=\"build/index.js\"></script>\n  </body>\n</html>\n```\n\nJsx example code: `build/index.js`\n\n```javascript\nvar Recaptcha = require('react-recaptcha');\n\nReactDOM.render(\n  <Recaptcha\n    sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n  />,\n  document.getElementById('example')\n);\n```\n\n### Explicitly render the reCAPTCHA widget\n\nDeferring the render can be achieved by specifying your onload callback function and adding parameters to the JavaScript resource.\n\n```html\n<html>\n  <head>\n    <title>reCAPTCHA demo: Simple page</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit\" async defer></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script src=\"build/index.js\"></script>\n  </body>\n</html>\n```\n\nJsx example code: `build/index.js`\n\n```javascript\nvar Recaptcha = require('react-recaptcha');\n\n// specifying your onload callback function\nvar callback = function () {\n  console.log('Done!!!!');\n};\n\nReactDOM.render(\n  <Recaptcha\n    sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n    render=\"explicit\"\n    onloadCallback={callback}\n  />,\n  document.getElementById('example')\n);\n```\n\nDefine verify Callback function\n\n```javascript\nvar Recaptcha = require('react-recaptcha');\n\n// specifying your onload callback function\nvar callback = function () {\n  console.log('Done!!!!');\n};\n\n// specifying verify callback function\nvar verifyCallback = function (response) {\n  console.log(response);\n};\n\nReactDOM.render(\n  <Recaptcha\n    sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n    render=\"explicit\"\n    verifyCallback={verifyCallback}\n    onloadCallback={callback}\n  />,\n  document.getElementById('example')\n);\n```\n\nChange the color theme of the widget. Please `theme` property `light|dark`. Default value is `light`.\n\n```javascript\nReactDOM.render(\n  <Recaptcha\n    sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n    theme=\"dark\"\n  />,\n  document.getElementById('example')\n);\n```\n\nChange the type of CAPTCHA to serve. Please `type` property `audio|image`. Default value is `image`.\n\n```javascript\nReactDOM.render(\n  <Recaptcha\n    sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n    type=\"audio\"\n  />,\n  document.getElementById('example')\n);\n```\n\n### Explicitly reset the reCAPTCHA widget\n\nThe reCAPTCHA widget can be manually reset by accessing the component instance via a callback ref and calling `.reset()` on the instance.\n\n```javascript\nvar Recaptcha = require('react-recaptcha');\n\n// create a variable to store the component instance\nlet recaptchaInstance;\n\n// create a reset function\nconst resetRecaptcha = () => {\n  recaptchaInstance.reset();  \n};\n\nReactDOM.render(\n  <div>\n    <Recaptcha\n      ref={e => recaptchaInstance = e}\n      sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n    />\n    <button\n      onClick={resetRecaptcha}\n    >\n     Reset\n    </button>\n  </div>,\n  document.getElementById('example')\n);\n```\n## Component props\n\n### Available props\n\nThe following props can be passed into the React reCAPTCHA component. These can also be viewed in the [source code](https://github.com/appleboy/react-recaptcha/blob/master/src/index.js#L4-L21)\n\n* `className` : the class for the reCAPTCHA div.\n* `onloadCallbackName` : the name of your onloadCallback function (see `onloadCallback` below).\n* `elementID` : the #id for the reCAPTCHA div.\n* `onloadCallback` : the callback to pass into the reCAPTCHA API if [rendering the reCAPTCHA explicitly](https://github.com/appleboy/react-recaptcha#explicitly-render-the-recaptcha-widget).\n* `verifyCallback` : the callback that fires after reCAPTCHA has verified a user.\n* `expiredCallback` : optional. A callback to pass into the reCAPTCHA if the reCAPTCHA response has expired.\n* `render` : specifies the render type for the component (e.g. explicit), see `onloadCallback` and [explicit rendering](https://github.com/appleboy/react-recaptcha#explicitly-render-the-recaptcha-widget).\n* `sitekey` : the sitekey for the reCAPTCHA widget, obtained after signing up for an API key.\n* `theme` : the color theme for the widget, either light or dark.\n* `type` : the type of reCAPTCHA you'd like to render, list of reCAPTCHA types [available here](https://developers.google.com/recaptcha/docs/versions).\n* `verifyCallbackName` : the name of your verifyCallback function, see `verifyCallback` above.\n* `expiredCallbackName` : the name of your expiredCallbackName function, see `expiredCallback` above.\n* `size` : the desired size of the reCAPTCHA widget, can be either 'compact' or 'normal'.\n* `tabindex` : optional: The tabindex of the widget and challenge. If other elements in your page use tabindex, it should be set to make user navigation easier. More info on tabindex [available here](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).\n* `hl` : optional. Forces the widget to render in a specific language. Auto-detects the user's language if unspecified. List of language codes [available here](https://developers.google.com/recaptcha/docs/language).\n* `badge` : optional. Reposition the reCAPTCHA badge. 'inline' allows you to control the CSS.\n\n### Default props\n\nIf not specified when rendering the component, the following props will be passed into the reCAPTCHA widget:\n\n```javascript\n  {\n    elementID: 'g-recaptcha',\n    onloadCallback: undefined,\n    onloadCallbackName: 'onloadCallback',\n    verifyCallback: undefined,\n    verifyCallbackName: 'verifyCallback',\n    expiredCallback: undefined,\n    expiredCallbackName: 'expiredCallback',\n    render: 'onload',\n    theme: 'light',\n    type: 'image',\n    size: 'normal',\n    tabindex: '0',\n    hl: 'en',\n    badge: 'bottomright',\n  };\n```\n\n\n### Using invisible reCAPTCHA\n\nUse the invisible reCAPTCHA by setting `size` prop to 'invisible'. Since it is invisible, the reCAPTCHA widget must be executed programatically.\n\n```javascript\nvar Recaptcha = require('react-recaptcha');\n\n// create a variable to store the component instance\nlet recaptchaInstance;\n\n// manually trigger reCAPTCHA execution\nconst executeCaptcha = function () {\n  recaptchaInstance.execute();\n};\n\n// executed once the captcha has been verified\n// can be used to post forms, redirect, etc.\nconst verifyCallback = function (response) {\n  console.log(response);\n  document.getElementById(\"someForm\").submit();\n};\n\nReactDOM.render(\n  <div>\n    <form id=\"someForm\" action=\"/search\" method=\"get\">\n      <input type=\"text\" name=\"query\">\n    </form>\n    <button\n      onClick={executeCaptcha}\n    >\n     Submit\n    </button>\n\n    <Recaptcha\n      ref={e => recaptchaInstance = e}\n      sitekey=\"xxxxxxxxxxxxxxxxxxxx\"\n      size=\"invisible\"\n      verifyCallback={verifyCallback}\n    />\n  </div>,\n  document.getElementById('example')\n);\n```\n\n# Contributing\n\n* 1. Fork it\n* 2. Create your feature branch (git checkout -b my-new-feature)\n* 3. Commit your changes (git commit -am 'Add some feature')\n* 4. Push to the branch (git push origin my-new-feature)\n* 5. Create new Pull Request\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appleboy/react-recaptcha.git"
  },
  "scripts": {
    "compile": "webpack -p --config webpack.production.config.js",
    "lint": "eslint src example",
    "prepublish": "NODE_ENV=production npm run compile",
    "start": "babel-node example/server.js",
    "test": "BABEL_ENV=production jest",
    "test:watch": "BABEL_ENV=production jest --watch"
  },
  "version": "2.3.10"
}
