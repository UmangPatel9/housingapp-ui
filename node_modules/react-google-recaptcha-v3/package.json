{
  "_args": [
    [
      {
        "raw": "react-google-recaptcha-v3",
        "scope": null,
        "escapedName": "react-google-recaptcha-v3",
        "name": "react-google-recaptcha-v3",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui"
    ]
  ],
  "_from": "react-google-recaptcha-v3",
  "_hasShrinkwrap": false,
  "_id": "react-google-recaptcha-v3@1.9.5",
  "_location": "/react-google-recaptcha-v3",
  "_nodeVersion": "14.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-google-recaptcha-v3_1.9.5_1625897934550_0.8639518889875364"
  },
  "_npmUser": {
    "name": "duongtran",
    "email": "tranthaiduong1210@gmail.com"
  },
  "_npmVersion": "6.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-google-recaptcha-v3",
    "scope": null,
    "escapedName": "react-google-recaptcha-v3",
    "name": "react-google-recaptcha-v3",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-google-recaptcha-v3/-/react-google-recaptcha-v3-1.9.5.tgz",
  "_shasum": "208834732c1e42a6f8503ab186de12398b8bf63f",
  "_shrinkwrap": null,
  "_spec": "react-google-recaptcha-v3",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui",
  "author": {
    "name": "Duong Tran"
  },
  "bugs": {
    "url": "https://github.com/t49tran/react-google-recaptcha-v3/issues"
  },
  "dependencies": {
    "hoist-non-react-statics": "^3.3.2"
  },
  "description": "React component for google-recaptcha v3",
  "devDependencies": {
    "@testing-library/react": "11.2.6",
    "@testing-library/react-hooks": "5.1.1",
    "@types/hoist-non-react-statics": "3.3.1",
    "@types/jest": "24.0.13",
    "@types/node": "14.0.1",
    "@types/react": "17.0.2",
    "@types/react-dom": "17.0.2",
    "awesome-typescript-loader": "5.2.1",
    "dotenv-webpack": "1.8.0",
    "jest": "26.6.3",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "rollup": "1.14.3",
    "rollup-plugin-commonjs": "10.0.0",
    "rollup-plugin-node-resolve": "5.0.1",
    "rollup-plugin-sourcemaps": "0.4.2",
    "rollup-plugin-terser": "7.0.2",
    "rollup-plugin-typescript2": "0.27.1",
    "source-map-loader": "0.2.4",
    "ts-jest": "26.5.4",
    "tslint": "5.15.0",
    "tslint-react": "4.0.0",
    "typescript": "4.0.3",
    "webpack": "4.43.0",
    "webpack-cli": "3.3.11",
    "webpack-dev-server": "3.11.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WmrhBMCnJovUPdA5S+9SmYlPTPIDXmUJWlHlOnJAXdU0cyZcVkqwln3kIj/NLl8Y6HH/4lKgno5N/e1N+fEtfg==",
    "shasum": "208834732c1e42a6f8503ab186de12398b8bf63f",
    "tarball": "https://registry.npmjs.org/react-google-recaptcha-v3/-/react-google-recaptcha-v3-1.9.5.tgz",
    "fileCount": 20,
    "unpackedSize": 106687,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg6TvPCRA9TVsSAnZWagAAHUMP+QCWM+2GW9I1VlmU3RKN\n3iOGJHSkGeELPiYbmiUrzUR7X62nsrJV0u43PqyLOMtawv1jLaa19oEWXdal\nHGG3QQuNUc/+Rj194Eo9U+vOuhsoegFF5ePlt82aT0ciXbYp8ObWDIR+XhZh\nzVsZVFyJiJ9lgh9EVmehYx0NH+o+WB1zD2lhgV6Hbr1b4pkesDvphA73lSMS\nx0SCepYeR/oMZars2GUZzsjbhPZWvEijG1LDTefsQWYt3XfYxPOjw0RCfhsR\nsHycNTlZ8sA0UedI0G15eAiQiSTKtF7qGSGY91Ki04koGoAPnLv4mscvA4zR\nUbKVSQKD12wlKSDiI70Ha8CDLcwtb0dhav/8/5josjE72xQWHXVg7vF9jIQp\nI/GUjRpsGgU7NG8OdknYIh3HOxBKAhhs4imi0XtS/wMaBKMoXQ6ue77HXbBt\nhLa7+OUnFMuxtpKznLlG+vWQD1weOSd99If1z71IM5ZSdGYeLyPmMvALtt8w\n2Am5ynsSUDFpTpNiAds/yn37TLBddBGSxWvVJovJmmIMkbfuTOv4OZbxCih0\nN14+1YY0ZlmHPhaGUq+JMHjB9wHkxhK4+baT+emAb8CNhczVERyJ6teqkDkY\nlmra9qLNR+i8MV1UqMC6v8/4LhJM6JbMpI3oDtrx/qtvS1WM+Ast38KMsZGA\n3Xzn\r\n=pSu4\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "f4b87d370241510254cb6192f4e7053410698b55",
  "homepage": "https://github.com/t49tran/react-google-recaptcha-v3",
  "license": "MIT",
  "main": "dist/react-google-recaptcha-v3.cjs.js",
  "maintainers": [
    {
      "name": "duongtran",
      "email": "tranthaiduong1210@gmail.com"
    }
  ],
  "module": "dist/react-google-recaptcha-v3.esm.js",
  "name": "react-google-recaptcha-v3",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^17.0",
    "react-dom": "^17.0"
  },
  "readme": "<h1 align=\"center\">React Google Recaptcha V3</h1>\n<div align=\"center\">\n\n[React](https://reactjs.org/) library for integrating Google ReCaptcha V3 to your App.\n\n[![npm package](https://img.shields.io/npm/v/react-google-recaptcha-v3/latest.svg)](https://www.npmjs.com/package/react-google-recaptcha-v3)\n![Code style](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)\n![type definition](https://img.shields.io/npm/types/react-google-recaptcha-v3)\n\n</div>\n\n## Install\n\n```bash\nnpm install react-google-recaptcha-v3\n```\n\n## Usage\n\n#### Provide Recaptcha Key\n\nTo use `react-google-recaptcha-v3`, you need to create a recaptcha key for your domain, you can get one from [here](https://www.google.com/recaptcha/intro/v3.html).\n\n#### Enterprise\n\nWhen you enable to use the enterprise version, **you must create new keys**. These keys will replace any Site Keys you created in reCAPTCHA. Check the [migration guide](https://cloud.google.com/recaptcha-enterprise/docs/migrate-recaptcha).\n\nTo work properly, you **must** select the Integration type to be `Scoring` since is equivalent to the reCAPTCHA v3.\n\nThe complete documentation to the enterprise version you can see [here](https://cloud.google.com/recaptcha-enterprise/docs/quickstart).\n\n#### Components\n\n##### GoogleReCaptchaProvider\n\n`react-google-recaptcha-v3` provides a `GoogleReCaptchaProvider` provider component that should be used to wrap around your components.\n\n`GoogleReCaptchaProvider`'s responsibility is to load the necessary reCaptcha script and provide access to reCaptcha to the rest of your application.\n\nUsually, your application only needs one provider. You should place it as high as possible in your React tree. It's to make sure you only have one instance of Google Recaptcha per page and it doesn't reload unecessarily when your components re-rendered.\n\nSame thing applied when you use this library with framework such as Next.js or React Router and only want to include the script on a single page. Try to make sure you only have one instance of the provider on a React tree and to place it as high (on the tree) as possible.\n\n| **Props**       | **Type** | **Default** | **Required?** | **Note**                                                                                                                                                                                                                                                        |\n| --------------- | :------: | ----------: | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| reCaptchaKey    | Boolean  |             | Yes           | Your recaptcha key, get one from [here](https://www.google.com/recaptcha/intro/v3.html)                                                                                                                                                                         |\n| scriptProps     |  Object  |             | No            | You can customize the injected `script` tag with this prop. It allows you to add `async`, `defer`, `nonce` attributes to the script tag. You can also control whether the injected script will be added to the document body or head with `appendTo` attribute. |\n| language        |  String  |             | No            | optional prop to support different languages that is supported by Google Recaptcha. https://developers.google.com/recaptcha/docs/language                                                                                                                       |\n| useRecaptchaNet | Boolean  |       false | No            | The provider also provide the prop `useRecaptchaNet` to load script from `recaptcha.net`: https://developers.google.com/recaptcha/docs/faq#can-i-use-recaptcha-globally                                                                                         |\n| useEnterprise   | Boolean  |       false | No            | [Enterprise option](#enterprise)                                                                                                                                                                                                                                |\n\n```javascript\nimport { GoogleReCaptchaProvider } from 'react-google-recaptcha-v3';\n\nReactDom.render(\n  <GoogleReCaptchaProvider\n    reCaptchaKey=\"[Your recaptcha key]\"\n    language=\"[optional_language]\"\n    useRecaptchaNet=\"[optional_boolean_value]\"\n    useEnterprise=\"[optional_boolean_value]\"\n    scriptProps={{\n      async: false, // optional, default to false,\n      defer: false, // optional, default to false\n      appendTo: 'head', // optional, default to \"head\", can be \"head\" or \"body\",\n      nonce: undefined // optional, default undefined\n    }}\n  >\n    <YourApp />\n  </GoogleReCaptchaProvider>,\n  document.getElementById('app')\n);\n```\n\nThere are three ways to trigger the recaptcha validation: using the `GoogleReCaptcha` component, wrapping your component with the HOC `withGoogleReCaptcha`, or using the custom hook `useGoogleReCaptcha`.\n\n#### GoogleReCaptcha\n\n`GoogleRecaptcha` is a react component that can be used in your app to trigger the validation. It provides a prop `onVerify`, which will be called once the verify is done successfully.\n\n```javascript\nimport {\n  GoogleReCaptchaProvider,\n  GoogleReCaptcha\n} from 'react-google-recaptcha-v3';\n\nReactDom.render(\n  <GoogleReCaptchaProvider reCaptchaKey=\"[Your recaptcha key]\">\n    <GoogleReCaptcha onVerify={handleVerify} />\n  </GoogleReCaptchaProvider>,\n  document.getElementById('app')\n);\n```\n\n```javascript\n// IMPORTANT NOTES: The `GoogleReCaptcha` component is a wrapper around `useGoogleRecaptcha` hook and use `useEffect` to run the verification.\n// It's important that you understand how React hooks work to use it properly.\n// Avoid using inline function for the `onVerify` props as it can possibly cause the verify function to run continously.\n// To avoid that problem, you can use a memoized function provided by `React.useCallback` or a class method\n// The code below is an example that inline function can result in an infinite loop and the verify function runs continously:\n\nconst MyComponent: FC = () => {\n  const [token, setToken] = useState();\n\n  return (\n    <div>\n      <GoogleReCaptcha\n        onVerify={token => {\n          setToken(token);\n        }}\n      />\n    </div>\n  );\n};\n```\n\n#### React Hook: useGoogleReCaptcha (recommended approach)\n\nIf you prefer a React Hook approach over the old good Higher Order Component, you can choose to use the custom hook `useGoogleReCaptcha` over the HOC `withGoogleReCaptcha`.\n\nThe `executeRecaptcha` function returned from the hook can be undefined when the recaptcha script has not been successfully loaded.\nYou can do a null check to see if it's available or not.\n\nHow to use the hook:\n\n```javascript\nimport {\n  GoogleReCaptchaProvider,\n  useGoogleReCaptcha\n} from 'react-google-recaptcha-v3';\n\nconst YourReCaptchaComponent = () => {\n  const { executeRecaptcha } = useGoogleReCaptcha();\n\n  // Create an event handler so you can call the verification on button click event or form submit\n  const handleReCaptchaVerify = useCallback(async () => {\n    if (!executeRecaptcha) {\n      console.log('Execute recaptcha not yet available');\n    }\n\n    const token = await executeRecaptcha('yourAction');\n    // Do whatever you want with the token\n  }, []);\n\n  // You can use useEffect to trigger the verification as soon as the component being loaded\n  useEffect(() => {\n    handleReCaptchaVerify();\n  }, [handleReCaptchaVerify]);\n\n  return <button onClick={handleRecaptchaVerify}>Verify recaptcha</button>;\n};\n\nReactDom.render(\n  <GoogleReCaptchaProvider reCaptchaKey=\"[Your recaptcha key]\">\n    <YourReCaptchaComponent />\n  </GoogleReCaptchaProvider>,\n  document.getElementById('app')\n);\n```\n\n#### withGoogleReCaptcha\n\n`GoogleRecaptcha` is a HOC (higher order component) that can be used to integrate reCaptcha validation with your component and trigger the validation programmatically. It inject the wrapped component with `googleReCaptchaProps` object.\n\nThe object contains the `executeRecaptcha` function that can be called to validate the user action.\n\nYou are recommended to use the custom hook `useGoogleReCaptcha` over the HOC whenever you can. The HOC can be removed in future version.\n\n```javascript\nimport {\n  GoogleReCaptchaProvider,\n  withGoogleReCaptcha\n} from 'react-google-recaptcha-v3';\n\nclass ReCaptchaComponent extends Component<{}> {\n  handleVerifyRecaptcha = async () => {\n    const { executeRecaptcha } = (this.props as IWithGoogleReCaptchaProps)\n      .googleReCaptchaProps;\n\n    if (!executeRecaptcha) {\n      console.log('Recaptcha has not been loaded');\n\n      return;\n    }\n\n    const token = await executeRecaptcha('homepage');\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleVerifyRecaptcha}>Verify Recaptcha</button>\n      </div>\n    );\n  }\n}\n\nexport const WithGoogleRecaptchaExample =\n  withGoogleReCaptcha(ReCaptchaComponent);\n\nReactDom.render(\n  <GoogleReCaptchaProvider reCaptchaKey=\"[Your recaptcha key]\">\n    <WithGoogleRecaptchaExample />\n  </GoogleReCaptchaProvider>,\n  document.getElementById('app')\n);\n```\n\n## Example\n\nAn example of how to use these two hooks can found inside the `example` folder. You will need to provide an .env file if you want to run it on your own machine.\n\n```\nRECAPTCHA_KEY=[YOUR_RECAPTCHA_KEY]\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/t49tran/react-google-recaptcha-v3.git"
  },
  "scripts": {
    "build": "rollup -c rollup.config.js",
    "build-example": "webpack --config webpack.config.js",
    "lint": "tslint -c tslint.json 'src/**/*.ts'",
    "prepublishOnly": "npm run test && npm run build",
    "test": "jest --verbose --env=jsdom"
  },
  "types": "dist/types/index.d.ts",
  "version": "1.9.5"
}
