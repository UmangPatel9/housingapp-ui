{
  "_args": [
    [
      {
        "raw": "@nodelib/fs.walk@^1.2.3",
        "scope": "@nodelib",
        "escapedName": "@nodelib%2ffs.walk",
        "name": "@nodelib/fs.walk",
        "rawSpec": "^1.2.3",
        "spec": ">=1.2.3 <2.0.0",
        "type": "range"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui\\node_modules\\fast-glob"
    ]
  ],
  "_from": "@nodelib/fs.walk@^1.2.3",
  "_hasShrinkwrap": false,
  "_id": "@nodelib/fs.walk@1.2.8",
  "_location": "/@nodelib/fs.walk",
  "_nodeVersion": "12.19.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fs.walk_1.2.8_1625769665411_0.7353908438765198"
  },
  "_npmUser": {
    "name": "mrmlnc",
    "email": "dmalinochkin@rambler.ru"
  },
  "_npmVersion": "lerna/3.22.1/node@v12.19.0+x64 (linux)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@nodelib/fs.walk@^1.2.3",
    "scope": "@nodelib",
    "escapedName": "@nodelib%2ffs.walk",
    "name": "@nodelib/fs.walk",
    "rawSpec": "^1.2.3",
    "spec": ">=1.2.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fast-glob"
  ],
  "_resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
  "_shasum": "e95737e8bb6746ddedf69c556953494f196fe69a",
  "_shrinkwrap": null,
  "_spec": "@nodelib/fs.walk@^1.2.3",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui\\node_modules\\fast-glob",
  "dependencies": {
    "@nodelib/fs.scandir": "2.1.5",
    "fastq": "^1.6.0"
  },
  "description": "A library for efficiently walking a directory recursively",
  "devDependencies": {
    "@nodelib/fs.macchiato": "1.0.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
    "shasum": "e95737e8bb6746ddedf69c556953494f196fe69a",
    "tarball": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
    "fileCount": 25,
    "unpackedSize": 26377,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg50bBCRA9TVsSAnZWagAAPtcP/3z39ENjrEc4tmlYeDt8\nhbgNj6QsS5yFzFaZ9Ty6pQYIsfLso34MoMZamdwKK5ikQevQLpDKSjmVEokX\nQdfmJOKdDsztOOPn9X7dohkSBC8vczrztj6F472xtPTHHy/Nz5AP6S9apCgO\nKAUF0aqXZ0ODkDQfF8FUAtigaFtShV4m9+OUsqSWEaXX8CY0wKfR1+y2F/B/\nyyFD0eU4xet9B/SDuwRME9Y2GOO6MMADFgdIYnF/U1IbQVs/APCirDUlR1a+\n02eIn0jSvNyBeYXPpHoIsChlFfcNSrLvvFCdThN8x2f9K7fh+KgHZTFcBioI\n+ulys0QTT+j1GViIlZnd/xBzjGmynT01FG8XCYHB0BSbm9Iat0l2sNWqK0s5\njxXSTGIFrCzg8+q4elggzZO/Du4twO84D6OBzKGBHEvq3MqKAk80s35/5l71\niXJ8hpVOuM9+LL3Dwxc9/aQRxqk35fGEBx51NQwQEVQ3dle56Q7rU593yZmY\nP3lDtw5ldGckUjjLBN752w0tukKzBBijLXrbKLxLWMw3Q5R/jkXIZYZmM+CO\nRGb5urOzy9J5egUED4Qtr2ybAwNf/JqqlqFRFYY5ZrBftPNf1N7TLF26MGA0\nXKGCTh6Ml8NZXfFxfKK+0oHuhhK6TntMLfxBT2V/vQ33s9BcpB1K2x71ciqx\n4+D5\r\n=aJdK\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 8"
  },
  "files": [
    "out/**",
    "!out/**/*.map",
    "!out/**/*.spec.*",
    "!out/**/tests/**"
  ],
  "gitHead": "1e5bad48565da2b06b8600e744324ea240bf49d8",
  "keywords": [
    "NodeLib",
    "fs",
    "FileSystem",
    "file system",
    "walk",
    "scanner",
    "crawler"
  ],
  "license": "MIT",
  "main": "out/index.js",
  "maintainers": [
    {
      "name": "mrmlnc",
      "email": "dmalinochkin@rambler.ru"
    }
  ],
  "name": "@nodelib/fs.walk",
  "optionalDependencies": {},
  "readme": "# @nodelib/fs.walk\n\n> A library for efficiently walking a directory recursively.\n\n## :bulb: Highlights\n\n* :moneybag: Returns useful information: `name`, `path`, `dirent` and `stats` (optional).\n* :rocket: On Node.js 10.10+ uses the mechanism without additional calls to determine the entry type for performance reasons. See [`old` and `modern` mode](https://github.com/nodelib/nodelib/blob/master/packages/fs/fs.scandir/README.md#old-and-modern-mode).\n* :gear: Built-in directories/files and error filtering system.\n* :link: Can safely work with broken symbolic links.\n\n## Install\n\n```console\nnpm install @nodelib/fs.walk\n```\n\n## Usage\n\n```ts\nimport * as fsWalk from '@nodelib/fs.walk';\n\nfsWalk.walk('path', (error, entries) => { /* … */ });\n```\n\n## API\n\n### .walk(path, [optionsOrSettings], callback)\n\nReads the directory recursively and asynchronously. Requires a callback function.\n\n> :book: If you want to use the Promise API, use `util.promisify`.\n\n```ts\nfsWalk.walk('path', (error, entries) => { /* … */ });\nfsWalk.walk('path', {}, (error, entries) => { /* … */ });\nfsWalk.walk('path', new fsWalk.Settings(), (error, entries) => { /* … */ });\n```\n\n### .walkStream(path, [optionsOrSettings])\n\nReads the directory recursively and asynchronously. [Readable Stream](https://nodejs.org/dist/latest-v12.x/docs/api/stream.html#stream_readable_streams) is used as a provider.\n\n```ts\nconst stream = fsWalk.walkStream('path');\nconst stream = fsWalk.walkStream('path', {});\nconst stream = fsWalk.walkStream('path', new fsWalk.Settings());\n```\n\n### .walkSync(path, [optionsOrSettings])\n\nReads the directory recursively and synchronously. Returns an array of entries.\n\n```ts\nconst entries = fsWalk.walkSync('path');\nconst entries = fsWalk.walkSync('path', {});\nconst entries = fsWalk.walkSync('path', new fsWalk.Settings());\n```\n\n#### path\n\n* Required: `true`\n* Type: `string | Buffer | URL`\n\nA path to a file. If a URL is provided, it must use the `file:` protocol.\n\n#### optionsOrSettings\n\n* Required: `false`\n* Type: `Options | Settings`\n* Default: An instance of `Settings` class\n\nAn [`Options`](#options) object or an instance of [`Settings`](#settings) class.\n\n> :book: When you pass a plain object, an instance of the `Settings` class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the `Settings` class.\n\n### Settings([options])\n\nA class of full settings of the package.\n\n```ts\nconst settings = new fsWalk.Settings({ followSymbolicLinks: true });\n\nconst entries = fsWalk.walkSync('path', settings);\n```\n\n## Entry\n\n* `name` — The name of the entry (`unknown.txt`).\n* `path` — The path of the entry relative to call directory (`root/unknown.txt`).\n* `dirent` — An instance of [`fs.Dirent`](./src/types/index.ts) class.\n* [`stats`] — An instance of `fs.Stats` class.\n\n## Options\n\n### basePath\n\n* Type: `string`\n* Default: `undefined`\n\nBy default, all paths are built relative to the root path. You can use this option to set custom root path.\n\nIn the example below we read the files from the `root` directory, but in the results the root path will be `custom`.\n\n```ts\nfsWalk.walkSync('root'); // → ['root/file.txt']\nfsWalk.walkSync('root', { basePath: 'custom' }); // → ['custom/file.txt']\n```\n\n### concurrency\n\n* Type: `number`\n* Default: `Infinity`\n\nThe maximum number of concurrent calls to `fs.readdir`.\n\n> :book: The higher the number, the higher performance and the load on the File System. If you want to read in quiet mode, set the value to `4 * os.cpus().length` (4 is default size of [thread pool work scheduling](http://docs.libuv.org/en/v1.x/threadpool.html#thread-pool-work-scheduling)).\n\n### deepFilter\n\n* Type: [`DeepFilterFunction`](./src/settings.ts)\n* Default: `undefined`\n\nA function that indicates whether the directory will be read deep or not.\n\n```ts\n// Skip all directories that starts with `node_modules`\nconst filter: DeepFilterFunction = (entry) => !entry.path.startsWith('node_modules');\n```\n\n### entryFilter\n\n* Type: [`EntryFilterFunction`](./src/settings.ts)\n* Default: `undefined`\n\nA function that indicates whether the entry will be included to results or not.\n\n```ts\n// Exclude all `.js` files from results\nconst filter: EntryFilterFunction = (entry) => !entry.name.endsWith('.js');\n```\n\n### errorFilter\n\n* Type: [`ErrorFilterFunction`](./src/settings.ts)\n* Default: `undefined`\n\nA function that allows you to skip errors that occur when reading directories.\n\nFor example, you can skip `ENOENT` errors if required:\n\n```ts\n// Skip all ENOENT errors\nconst filter: ErrorFilterFunction = (error) => error.code == 'ENOENT';\n```\n\n### stats\n\n* Type: `boolean`\n* Default: `false`\n\nAdds an instance of `fs.Stats` class to the [`Entry`](#entry).\n\n> :book: Always use `fs.readdir` with additional `fs.lstat/fs.stat` calls to determine the entry type.\n\n### followSymbolicLinks\n\n* Type: `boolean`\n* Default: `false`\n\nFollow symbolic links or not. Call `fs.stat` on symbolic link if `true`.\n\n### `throwErrorOnBrokenSymbolicLink`\n\n* Type: `boolean`\n* Default: `true`\n\nThrow an error when symbolic link is broken if `true` or safely return `lstat` call if `false`.\n\n### `pathSegmentSeparator`\n\n* Type: `string`\n* Default: `path.sep`\n\nBy default, this package uses the correct path separator for your OS (`\\` on Windows, `/` on Unix-like systems). But you can set this option to any separator character(s) that you want to use instead.\n\n### `fs`\n\n* Type: `FileSystemAdapter`\n* Default: A default FS methods\n\nBy default, the built-in Node.js module (`fs`) is used to work with the file system. You can replace any method with your own.\n\n```ts\ninterface FileSystemAdapter {\n\tlstat: typeof fs.lstat;\n\tstat: typeof fs.stat;\n\tlstatSync: typeof fs.lstatSync;\n\tstatSync: typeof fs.statSync;\n\treaddir: typeof fs.readdir;\n\treaddirSync: typeof fs.readdirSync;\n}\n\nconst settings = new fsWalk.Settings({\n\tfs: { lstat: fakeLstat }\n});\n```\n\n## Changelog\n\nSee the [Releases section of our GitHub project](https://github.com/nodelib/nodelib/releases) for changelog for each release version.\n\n## License\n\nThis software is released under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodelib/nodelib/tree/master/packages/fs/fs.walk"
  },
  "scripts": {
    "build": "npm run clean && npm run compile && npm run lint && npm test",
    "clean": "rimraf {tsconfig.tsbuildinfo,out}",
    "compile": "tsc -b .",
    "compile:watch": "tsc -p . --watch --sourceMap",
    "lint": "eslint \"src/**/*.ts\" --cache",
    "test": "mocha \"out/**/*.spec.js\" -s 0",
    "watch": "npm run clean && npm run compile:watch"
  },
  "typings": "out/index.d.ts",
  "version": "1.2.8"
}
