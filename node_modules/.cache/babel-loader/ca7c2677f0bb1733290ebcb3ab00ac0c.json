{"ast":null,"code":"var _jsxFileName = \"G:\\\\Umang\\\\Housing app\\\\react app\\\\housingapp-ui\\\\src\\\\components\\\\MyAccordion.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyAccordion = ({\n  list,\n  renderPanel,\n  renderHeader\n}) => {\n  const headerClicked = _event => {\n    // console.log(_event);\n    _event.currentTarget.classList.toggle(\"active\");\n    /* Toggle close all panels, except on that was clicked */\n\n\n    const allPanels = document.getElementsByClassName(\"panel\");\n    Array.from(allPanels).forEach(panel => {\n      if (_event.currentTarget.nextElementSibling !== panel) {\n        panel.style.maxHeight = null;\n      }\n\n      panel.previousElementSibling.classList.remove(\"active\");\n    });\n    /* Toggle between hiding and showing the active panel */\n\n    var panel = _event.currentTarget.nextElementSibling;\n\n    if (panel.style.maxHeight) {\n      panel.style.maxHeight = null;\n    } else {\n      panel.style.maxHeight = panel.scrollHeight + \"px\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"accordion\",\n          onClick: headerClicked,\n          children: renderHeader(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel\",\n          children: renderPanel(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MyAccordion;\nexport default MyAccordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyAccordion\");","map":{"version":3,"sources":["G:/Umang/Housing app/react app/housingapp-ui/src/components/MyAccordion.tsx"],"names":["React","MyAccordion","list","renderPanel","renderHeader","headerClicked","_event","currentTarget","classList","toggle","allPanels","document","getElementsByClassName","Array","from","forEach","panel","nextElementSibling","style","maxHeight","previousElementSibling","remove","scrollHeight","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAQA,MAAMC,WAAuC,GAAG,CAAC;AAC/CC,EAAAA,IAD+C;AAE/CC,EAAAA,WAF+C;AAG/CC,EAAAA;AAH+C,CAAD,KAI1C;AACJ,QAAMC,aAAa,GAAIC,MAAD,IAAiB;AACrC;AACAA,IAAAA,MAAM,CAACC,aAAP,CAAqBC,SAArB,CAA+BC,MAA/B,CAAsC,QAAtC;AACA;;;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,OAAhC,CAAlB;AAEAC,IAAAA,KAAK,CAACC,IAAN,CAAWJ,SAAX,EAAsBK,OAAtB,CAA+BC,KAAD,IAAgB;AAC5C,UAAIV,MAAM,CAACC,aAAP,CAAqBU,kBAArB,KAA4CD,KAAhD,EAAuD;AACrDA,QAAAA,KAAK,CAACE,KAAN,CAAYC,SAAZ,GAAwB,IAAxB;AACD;;AACDH,MAAAA,KAAK,CAACI,sBAAN,CAA6BZ,SAA7B,CAAuCa,MAAvC,CAA8C,QAA9C;AACD,KALD;AAMA;;AACA,QAAIL,KAAK,GAAGV,MAAM,CAACC,aAAP,CAAqBU,kBAAjC;;AACA,QAAID,KAAK,CAACE,KAAN,CAAYC,SAAhB,EAA2B;AACzBH,MAAAA,KAAK,CAACE,KAAN,CAAYC,SAAZ,GAAwB,IAAxB;AACD,KAFD,MAEO;AACLH,MAAAA,KAAK,CAACE,KAAN,CAAYC,SAAZ,GAAwBH,KAAK,CAACM,YAAN,GAAqB,IAA7C;AACD;AACF,GAnBD;;AAqBA,sBACE;AAAA,cACGpB,IAAI,CAACqB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,0BACE;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,WAAlB;AAA8B,UAAA,OAAO,EAAEpB,aAAvC;AAAA,oBACGD,YAAY,CAACoB,IAAD;AADf;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,oBAAwBrB,WAAW,CAACqB,IAAD;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAxCD;;KAAMxB,W;AA0CN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\n\r\nexport interface MyAccordionProps {\r\n  list: Array<any>;\r\n  renderHeader: (item: any) => React.ReactNode;\r\n  renderPanel: (item: any) => React.ReactNode;\r\n}\r\n\r\nconst MyAccordion: React.FC<MyAccordionProps> = ({\r\n  list,\r\n  renderPanel,\r\n  renderHeader,\r\n}) => {\r\n  const headerClicked = (_event: any) => {\r\n    // console.log(_event);\r\n    _event.currentTarget.classList.toggle(\"active\");\r\n    /* Toggle close all panels, except on that was clicked */\r\n    const allPanels = document.getElementsByClassName(\"panel\");\r\n\r\n    Array.from(allPanels).forEach((panel: any) => {\r\n      if (_event.currentTarget.nextElementSibling !== panel) {\r\n        panel.style.maxHeight = null;\r\n      }\r\n      panel.previousElementSibling.classList.remove(\"active\");\r\n    });\r\n    /* Toggle between hiding and showing the active panel */\r\n    var panel = _event.currentTarget.nextElementSibling;\r\n    if (panel.style.maxHeight) {\r\n      panel.style.maxHeight = null;\r\n    } else {\r\n      panel.style.maxHeight = panel.scrollHeight + \"px\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {list.map((item, index) => {\r\n        return (\r\n          <div key={index}>\r\n            <button className=\"accordion\" onClick={headerClicked}>\r\n              {renderHeader(item)}\r\n            </button>\r\n            <div className=\"panel\">{renderPanel(item)}</div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyAccordion;"]},"metadata":{},"sourceType":"module"}