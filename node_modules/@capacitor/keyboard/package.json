{
  "_args": [
    [
      {
        "raw": "@capacitor/keyboard",
        "scope": "@capacitor",
        "escapedName": "@capacitor%2fkeyboard",
        "name": "@capacitor/keyboard",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui"
    ]
  ],
  "_from": "@capacitor/keyboard",
  "_hasShrinkwrap": false,
  "_id": "@capacitor/keyboard@1.0.3",
  "_location": "/@capacitor/keyboard",
  "_nodeVersion": "14.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/keyboard_1.0.3_1630528351121_0.979962316558795"
  },
  "_npmUser": {
    "name": "elylucas",
    "email": "ely@meta-tek.net"
  },
  "_npmVersion": "lerna/3.22.1/node@v14.15.2+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@capacitor/keyboard",
    "scope": "@capacitor",
    "escapedName": "@capacitor%2fkeyboard",
    "name": "@capacitor/keyboard",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@capacitor/keyboard/-/keyboard-1.0.3.tgz",
  "_shasum": "a706f014b3c04d956fcdff03a89ab93de620a50e",
  "_shrinkwrap": null,
  "_spec": "@capacitor/keyboard",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui",
  "author": {
    "name": "Ionic",
    "email": "hi@ionicframework.com"
  },
  "bugs": {
    "url": "https://github.com/ionic-team/capacitor-plugins/issues"
  },
  "capacitor": {
    "ios": {
      "src": "ios"
    },
    "android": {
      "src": "android"
    }
  },
  "dependencies": {},
  "description": "The Keyboard API provides keyboard display and visibility control, along with event tracking when the keyboard shows and hides.",
  "devDependencies": {
    "@capacitor/android": "^3.0.0",
    "@capacitor/cli": "^3.0.0",
    "@capacitor/core": "^3.0.0",
    "@capacitor/docgen": "0.0.17",
    "@capacitor/ios": "^3.0.0",
    "@ionic/eslint-config": "^0.3.0",
    "@ionic/prettier-config": "~1.0.1",
    "@ionic/swiftlint-config": "^1.1.2",
    "eslint": "^7.11.0",
    "prettier": "~2.3.0",
    "prettier-plugin-java": "~1.0.2",
    "rimraf": "^3.0.0",
    "rollup": "^2.29.0",
    "swiftlint": "^1.0.1",
    "typescript": "~4.1.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-s963GqVAvhdqxwtASjev/Az6gm164GbAxZGXP29VK8J+j363y++F9uDVUNfud9z7msdXaoV4btyk7cc7rmxydg==",
    "shasum": "a706f014b3c04d956fcdff03a89ab93de620a50e",
    "tarball": "https://registry.npmjs.org/@capacitor/keyboard/-/keyboard-1.0.3.tgz",
    "fileCount": 25,
    "unpackedSize": 77671,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhL+NfCRA9TVsSAnZWagAA/5YQAJrXSUj2DA6X+0L+7hmG\njYY69BbQh8alICw9OhJYw4TYGsegLqCCasLXJVcB0juw/oVvmf2JQ0PNQ5nT\neDQgtoYRv3IOQNeJoTY/+jqELq59Ytsyu0YXaoVI6fQOwT6pSLxoXbzA/xPP\ns4Do6zwRzjb7uPqVdDCjPhmvyBBLjoI2/4LKjxzNZ2SGqzFy3NRohBV6WOpm\npffjAzR85VoMM7k9aXYO+31OruJxYyrSfrpDX8x6GLLo36v95YVpVO9IB6sx\nBDhfDGM/yeARHCL4TAbQLDb10TDUIrunhFM8RB70JqPdxgGVCeSylzJ3Fq6F\nnYK3pqZkr2smZNyN3ijESAFl1W/7e2y5c9vpEdjnvJGc+TJFeGMTJyphYd4M\nbebixIfKdKB+GXWHl1IfcY5031RJNJS5awqmNWkk31ZWpGJqm9neWsybdMBF\nEcCQ79S7zUoPvpirgYQjzDUISy8birl3Wnxeq8ATjATlUd8cfAAOgrqRhgCM\nBWTl0F8fj1bXVk9zij6se61C5xprzaJA/AYtrDBCXg7Srw2ohwr8W1nZf5/O\nvNUhS91snoirr/C7PgFpr8mPCUd2cDKI7zrU8pMXYyojkmYfEIIIP5qXzIDk\n3HQUYnfGWbaHCvsZBv3X1QkSD/6ySGOJm8rZ/7chrz6lgeXlvaip2jdL+dEN\n1xFc\r\n=uWLf\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "@ionic/eslint-config/recommended"
  },
  "files": [
    "android/src/main/",
    "android/build.gradle",
    "dist/",
    "ios/Plugin/",
    "CapacitorKeyboard.podspec"
  ],
  "gitHead": "f0dcbb1413ba781714dfdc44f41c0ccab735b1e9",
  "homepage": "https://github.com/ionic-team/capacitor-plugins#readme",
  "keywords": [
    "capacitor",
    "plugin",
    "native"
  ],
  "license": "MIT",
  "main": "dist/plugin.cjs.js",
  "maintainers": [
    {
      "name": "ionicjs",
      "email": "hi@ionicframework.com"
    },
    {
      "name": "maxlynch",
      "email": "max@ionic.io"
    },
    {
      "name": "mhartington",
      "email": "mikehartington@gmail.com"
    },
    {
      "name": "jcesarmobile",
      "email": "jcesarmobile@gmail.com"
    },
    {
      "name": "cmapoole",
      "email": "carl@ionic.io"
    },
    {
      "name": "nhyatt",
      "email": "nick@ionic.io"
    },
    {
      "name": "elylucas",
      "email": "ely@meta-tek.net"
    }
  ],
  "module": "dist/esm/index.js",
  "name": "@capacitor/keyboard",
  "optionalDependencies": {},
  "peerDependencies": {
    "@capacitor/core": "^3.0.0"
  },
  "prettier": "@ionic/prettier-config",
  "publishConfig": {
    "access": "public"
  },
  "readme": "# @capacitor/keyboard\n\nThe Keyboard API provides keyboard display and visibility control, along with event tracking when the keyboard shows and hides.\n\n## Install\n\n```bash\nnpm install @capacitor/keyboard\nnpx cap sync\n```\n\n## Example\n\n```typescript\nimport { Keyboard } from '@capacitor/keyboard';\n\nKeyboard.addListener('keyboardWillShow', info => {\n  console.log('keyboard will show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardDidShow', info => {\n  console.log('keyboard did show with height:', info.keyboardHeight);\n});\n\nKeyboard.addListener('keyboardWillHide', () => {\n  console.log('keyboard will hide');\n});\n\nKeyboard.addListener('keyboardDidHide', () => {\n  console.log('keyboard did hide');\n});\n```\n\n## Configuration\n\n<docgen-config>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\nOn iOS, the keyboard can be configured with the following options:\n\n| Prop         | Type                                                      | Description                                                                                                                                                                   | Default             | Since |\n| ------------ | --------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ----- |\n| **`resize`** | <code><a href=\"#keyboardresize\">KeyboardResize</a></code> | Configure the way the app is resized when the Keyboard appears. Only available on iOS.                                                                                        | <code>native</code> | 1.0.0 |\n| **`style`**  | <code>'dark' \\| 'light'</code>                            | Override the keyboard style if your app doesn't support dark/light theme changes. If not set, the keyboard style will depend on the device appearance. Only available on iOS. |                     | 1.0.0 |\n\n### Examples\n\nIn `capacitor.config.json`:\n\n```json\n{\n  \"plugins\": {\n    \"Keyboard\": {\n      \"resize\": \"body\",\n      \"style\": \"dark\"\n    }\n  }\n}\n```\n\nIn `capacitor.config.ts`:\n\n```ts\n/// <reference types=\"@capacitor/keyboard\" />\n\nimport { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  plugins: {\n    Keyboard: {\n      resize: \"body\",\n      style: \"dark\",\n    },\n  },\n};\n\nexport default config;\n```\n\n</docgen-config>\n\n## Compatibility with `cordova-plugin-ionic-keyboard`\n\nTo maintain compatibility with\n[`cordova-plugin-ionic-keyboard`](https://github.com/ionic-team/cordova-plugin-ionic-keyboard),\nthe following events also work with `window.addEventListener`:\n\n- `keyboardWillShow`\n- `keyboardDidShow`\n- `keyboardWillHide`\n- `keyboardDidHide`\n\n## API\n\n<docgen-index>\n\n* [`show()`](#show)\n* [`hide()`](#hide)\n* [`setAccessoryBarVisible(...)`](#setaccessorybarvisible)\n* [`setScroll(...)`](#setscroll)\n* [`setStyle(...)`](#setstyle)\n* [`setResizeMode(...)`](#setresizemode)\n* [`addListener('keyboardWillShow', ...)`](#addlistenerkeyboardwillshow-)\n* [`addListener('keyboardDidShow', ...)`](#addlistenerkeyboarddidshow-)\n* [`addListener('keyboardWillHide', ...)`](#addlistenerkeyboardwillhide-)\n* [`addListener('keyboardDidHide', ...)`](#addlistenerkeyboarddidhide-)\n* [`removeAllListeners()`](#removealllisteners)\n* [Interfaces](#interfaces)\n* [Enums](#enums)\n\n</docgen-index>\n\n<docgen-api>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\n### show()\n\n```typescript\nshow() => Promise<void>\n```\n\nShow the keyboard. This method is alpha and may have issues.\n\nThis method is only supported on Android.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### hide()\n\n```typescript\nhide() => Promise<void>\n```\n\nHide the keyboard.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setAccessoryBarVisible(...)\n\n```typescript\nsetAccessoryBarVisible(options: { isVisible: boolean; }) => Promise<void>\n```\n\nSet whether the accessory bar should be visible on the keyboard. We recommend disabling\nthe accessory bar for short forms (login, signup, etc.) to provide a cleaner UI.\n\nThis method is only supported on iPhone devices.\n\n| Param         | Type                                 |\n| ------------- | ------------------------------------ |\n| **`options`** | <code>{ isVisible: boolean; }</code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setScroll(...)\n\n```typescript\nsetScroll(options: { isDisabled: boolean; }) => Promise<void>\n```\n\nProgrammatically enable or disable the WebView scroll.\n\nThis method is only supported on iOS.\n\n| Param         | Type                                  |\n| ------------- | ------------------------------------- |\n| **`options`** | <code>{ isDisabled: boolean; }</code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setStyle(...)\n\n```typescript\nsetStyle(options: KeyboardStyleOptions) => Promise<void>\n```\n\nProgrammatically set the keyboard style.\n\nThis method is only supported on iOS.\n\n| Param         | Type                                                                  |\n| ------------- | --------------------------------------------------------------------- |\n| **`options`** | <code><a href=\"#keyboardstyleoptions\">KeyboardStyleOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### setResizeMode(...)\n\n```typescript\nsetResizeMode(options: KeyboardResizeOptions) => Promise<void>\n```\n\nProgrammatically set the resize mode.\n\nThis method is only supported on iOS.\n\n| Param         | Type                                                                    |\n| ------------- | ----------------------------------------------------------------------- |\n| **`options`** | <code><a href=\"#keyboardresizeoptions\">KeyboardResizeOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardWillShow', ...)\n\n```typescript\naddListener(eventName: 'keyboardWillShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is about to be shown.\n\n| Param              | Type                                                                     |\n| ------------------ | ------------------------------------------------------------------------ |\n| **`eventName`**    | <code>'keyboardWillShow'</code>                                          |\n| **`listenerFunc`** | <code>(info: <a href=\"#keyboardinfo\">KeyboardInfo</a>) =&gt; void</code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardDidShow', ...)\n\n```typescript\naddListener(eventName: 'keyboardDidShow', listenerFunc: (info: KeyboardInfo) => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is shown.\n\n| Param              | Type                                                                     |\n| ------------------ | ------------------------------------------------------------------------ |\n| **`eventName`**    | <code>'keyboardDidShow'</code>                                           |\n| **`listenerFunc`** | <code>(info: <a href=\"#keyboardinfo\">KeyboardInfo</a>) =&gt; void</code> |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardWillHide', ...)\n\n```typescript\naddListener(eventName: 'keyboardWillHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is about to be hidden.\n\n| Param              | Type                            |\n| ------------------ | ------------------------------- |\n| **`eventName`**    | <code>'keyboardWillHide'</code> |\n| **`listenerFunc`** | <code>() =&gt; void</code>      |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### addListener('keyboardDidHide', ...)\n\n```typescript\naddListener(eventName: 'keyboardDidHide', listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle\n```\n\nListen for when the keyboard is hidden.\n\n| Param              | Type                           |\n| ------------------ | ------------------------------ |\n| **`eventName`**    | <code>'keyboardDidHide'</code> |\n| **`listenerFunc`** | <code>() =&gt; void</code>     |\n\n**Returns:** <code>Promise&lt;<a href=\"#pluginlistenerhandle\">PluginListenerHandle</a>&gt; & <a href=\"#pluginlistenerhandle\">PluginListenerHandle</a></code>\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### removeAllListeners()\n\n```typescript\nremoveAllListeners() => Promise<void>\n```\n\nRemove all native listeners for this plugin.\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### Interfaces\n\n\n#### KeyboardStyleOptions\n\n| Prop        | Type                                                    | Description            | Default                            | Since |\n| ----------- | ------------------------------------------------------- | ---------------------- | ---------------------------------- | ----- |\n| **`style`** | <code><a href=\"#keyboardstyle\">KeyboardStyle</a></code> | Style of the keyboard. | <code>KeyboardStyle.Default</code> | 1.0.0 |\n\n\n#### KeyboardResizeOptions\n\n| Prop       | Type                                                      | Description                                             | Since |\n| ---------- | --------------------------------------------------------- | ------------------------------------------------------- | ----- |\n| **`mode`** | <code><a href=\"#keyboardresize\">KeyboardResize</a></code> | Mode used to resize elements when the keyboard appears. | 1.0.0 |\n\n\n#### PluginListenerHandle\n\n| Prop         | Type                                      |\n| ------------ | ----------------------------------------- |\n| **`remove`** | <code>() =&gt; Promise&lt;void&gt;</code> |\n\n\n#### KeyboardInfo\n\n| Prop                 | Type                | Description             | Since |\n| -------------------- | ------------------- | ----------------------- | ----- |\n| **`keyboardHeight`** | <code>number</code> | Height of the heyboard. | 1.0.0 |\n\n\n### Enums\n\n\n#### KeyboardStyle\n\n| Members       | Value                  | Description                                                                                                                                                                                                                                 | Since |\n| ------------- | ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`Dark`**    | <code>'DARK'</code>    | Dark keyboard.                                                                                                                                                                                                                              | 1.0.0 |\n| **`Light`**   | <code>'LIGHT'</code>   | Light keyboard.                                                                                                                                                                                                                             | 1.0.0 |\n| **`Default`** | <code>'DEFAULT'</code> | On iOS 13 and newer the keyboard style is based on the device appearance. If the device is using Dark mode, the keyboard will be dark. If the device is using Light mode, the keyboard will be light. On iOS 12 the keyboard will be light. | 1.0.0 |\n\n\n#### KeyboardResize\n\n| Members      | Value                 | Description                                                                                                          | Since |\n| ------------ | --------------------- | -------------------------------------------------------------------------------------------------------------------- | ----- |\n| **`Body`**   | <code>'body'</code>   | Only the `body` HTML element will be resized. Relative units are not affected, because the viewport does not change. | 1.0.0 |\n| **`Ionic`**  | <code>'ionic'</code>  | Only the `ion-app` HTML element will be resized. Use it only for Ionic Framework apps.                               | 1.0.0 |\n| **`Native`** | <code>'native'</code> | The whole native Web View will be resized when the keyboard shows/hides. This affects the `vh` relative unit.        | 1.0.0 |\n| **`None`**   | <code>'none'</code>   | Neither the app nor the Web View are resized.                                                                        | 1.0.0 |\n\n</docgen-api>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ionic-team/capacitor-plugins.git"
  },
  "scripts": {
    "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.js",
    "clean": "rimraf ./dist",
    "docgen": "docgen --api KeyboardPlugin --output-readme README.md --output-json dist/docs.json",
    "eslint": "eslint . --ext ts",
    "fmt": "npm run eslint -- --fix && npm run prettier -- --write && npm run swiftlint -- autocorrect --format",
    "lint": "npm run eslint && npm run prettier -- --check && npm run swiftlint -- lint",
    "postpublish": "npm run publish:cocoapod",
    "prepublishOnly": "npm run build",
    "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
    "publish:cocoapod": "pod trunk push ./CapacitorKeyboard.podspec --allow-warnings",
    "swiftlint": "node-swiftlint",
    "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
    "verify:android": "cd android && ./gradlew clean build test && cd ..",
    "verify:ios": "cd ios && pod install && xcodebuild -workspace Plugin.xcworkspace -scheme Plugin && cd ..",
    "verify:web": "npm run build",
    "watch": "tsc --watch"
  },
  "swiftlint": "@ionic/swiftlint-config",
  "types": "dist/esm/index.d.ts",
  "unpkg": "dist/plugin.js",
  "version": "1.0.3"
}
