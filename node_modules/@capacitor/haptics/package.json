{
  "_args": [
    [
      {
        "raw": "@capacitor/haptics",
        "scope": "@capacitor",
        "escapedName": "@capacitor%2fhaptics",
        "name": "@capacitor/haptics",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui"
    ]
  ],
  "_from": "@capacitor/haptics",
  "_hasShrinkwrap": false,
  "_id": "@capacitor/haptics@1.0.3",
  "_location": "/@capacitor/haptics",
  "_nodeVersion": "14.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/haptics_1.0.3_1630528351057_0.9260864067649197"
  },
  "_npmUser": {
    "name": "elylucas",
    "email": "ely@meta-tek.net"
  },
  "_npmVersion": "lerna/3.22.1/node@v14.15.2+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@capacitor/haptics",
    "scope": "@capacitor",
    "escapedName": "@capacitor%2fhaptics",
    "name": "@capacitor/haptics",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@capacitor/haptics/-/haptics-1.0.3.tgz",
  "_shasum": "f839f6809ae707aab66591d8efafd8881dd6397d",
  "_shrinkwrap": null,
  "_spec": "@capacitor/haptics",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui",
  "author": {
    "name": "Ionic",
    "email": "hi@ionicframework.com"
  },
  "bugs": {
    "url": "https://github.com/ionic-team/capacitor-plugins/issues"
  },
  "capacitor": {
    "ios": {
      "src": "ios"
    },
    "android": {
      "src": "android"
    }
  },
  "dependencies": {},
  "description": "The Haptics API provides physical feedback to the user through touch or vibration.",
  "devDependencies": {
    "@capacitor/android": "^3.0.0",
    "@capacitor/core": "^3.0.0",
    "@capacitor/docgen": "0.0.17",
    "@capacitor/ios": "^3.0.0",
    "@ionic/eslint-config": "^0.3.0",
    "@ionic/prettier-config": "~1.0.1",
    "@ionic/swiftlint-config": "^1.1.2",
    "eslint": "^7.11.0",
    "prettier": "~2.3.0",
    "prettier-plugin-java": "~1.0.2",
    "rimraf": "^3.0.0",
    "rollup": "^2.29.0",
    "swiftlint": "^1.0.1",
    "typescript": "~4.1.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RPV8kd4bY7sdmssXMkrg9v0HrjJZoCkbVk5ygbTByM+Yxl/1qqQUkEnBzCsA48tJHQz4ddTMjtpBEblS+GWUsw==",
    "shasum": "f839f6809ae707aab66591d8efafd8881dd6397d",
    "tarball": "https://registry.npmjs.org/@capacitor/haptics/-/haptics-1.0.3.tgz",
    "fileCount": 32,
    "unpackedSize": 70133,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhL+NfCRA9TVsSAnZWagAA43oP/1tt1mqfyZ6muoDTMHzy\nu0Id9M6RIDS/Qc/pYQz0N1FTJF51AXJIjhO1nTrO6uuf9LDQfVosFit9iLbE\nyQpLO5494Vz/IrJm/4dMgxXt58kWuLIJbKoCtQWzYBDxGekbz95ffAXh2JdD\nPrSf0zPEroHDGaPkoYvnr9+5Xoa3dGcypeXSazicZdrJV1vb0Mb8No9mmYV1\nf/fJSVZrWZXQOMe50F7C0SdefdkbHWpWVLM0p9lkb8hCP4bD7n7bTAYL6U7s\n59jhcij2vQyC/4ADIa5TA+pxKf26ujM56wSAmEiY6PM7pXg2cKrrpnEqmfCe\nPK72LE5P8qcXTDe1tfjz7s34WPtpdlFdsvlHu2EQYdUMz6RJoHUCWGTPKJfK\nSpOz589JF9d+UQncB61wsCCaFXbNz5ssE6I+jgDL2Yh1eQHI4Wi1NvDEmXJl\n8jHVaSQP7vcCt3puJ15Sq5zYuS/Xj7rSc46U+H3sy5G0v/4+rKONvlOYDByU\n2v1zj5xTC5uSDKDDeMM8/eaDq+Hw9pm14Rfhz46VqGidgobagxnq69PtByRN\nyr5VRCYGJUyjgiv2KoP/rAHVt6HPzg2iNgACn2sZ+JW9uo042Ms3SbX3hdl+\nPgclxIqrDhUG7hwUNuoQRvWPTvWmjXCqpXptYhGMOxXAC7JJiHvwoLvyRHAj\nwjbe\r\n=qaaR\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "@ionic/eslint-config/recommended"
  },
  "files": [
    "android/src/main/",
    "android/build.gradle",
    "dist/",
    "ios/Plugin/",
    "CapacitorHaptics.podspec"
  ],
  "gitHead": "f0dcbb1413ba781714dfdc44f41c0ccab735b1e9",
  "homepage": "https://github.com/ionic-team/capacitor-plugins#readme",
  "keywords": [
    "capacitor",
    "plugin",
    "native"
  ],
  "license": "MIT",
  "main": "dist/plugin.cjs.js",
  "maintainers": [
    {
      "name": "ionicjs",
      "email": "hi@ionicframework.com"
    },
    {
      "name": "maxlynch",
      "email": "max@ionic.io"
    },
    {
      "name": "mhartington",
      "email": "mikehartington@gmail.com"
    },
    {
      "name": "jcesarmobile",
      "email": "jcesarmobile@gmail.com"
    },
    {
      "name": "cmapoole",
      "email": "carl@ionic.io"
    },
    {
      "name": "nhyatt",
      "email": "nick@ionic.io"
    },
    {
      "name": "elylucas",
      "email": "ely@meta-tek.net"
    }
  ],
  "module": "dist/esm/index.js",
  "name": "@capacitor/haptics",
  "optionalDependencies": {},
  "peerDependencies": {
    "@capacitor/core": "^3.0.0"
  },
  "prettier": "@ionic/prettier-config",
  "publishConfig": {
    "access": "public"
  },
  "readme": "# @capacitor/haptics\n\nThe Haptics API provides physical feedback to the user through touch or vibration.\n\n## Install\n\n```bash\nnpm install @capacitor/haptics\nnpx cap sync\n```\n\n## Example\n\n```typescript\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\nconst hapticsImpactMedium = async () => {\n  await Haptics.impact({ style: ImpactStyle.Medium });\n};\n\nconst hapticsImpactLight = async () => {\n  await Haptics.impact({ style: ImpactStyle.Light });\n};\n\nconst hapticsVibrate = async () => {\n  await Haptics.vibrate();\n};\n\nconst hapticsSelectionStart = async () => {\n  await Haptics.selectionStart();\n};\n\nconst hapticsSelectionChanged = async () => {\n  await Haptics.selectionChanged();\n};\n\nconst hapticsSelectionEnd = async () => {\n  await Haptics.selectionEnd();\n};\n```\n\n## API\n\n<docgen-index>\n\n* [`impact(...)`](#impact)\n* [`notification(...)`](#notification)\n* [`vibrate(...)`](#vibrate)\n* [`selectionStart()`](#selectionstart)\n* [`selectionChanged()`](#selectionchanged)\n* [`selectionEnd()`](#selectionend)\n* [Interfaces](#interfaces)\n* [Enums](#enums)\n\n</docgen-index>\n\n<docgen-api>\n<!--Update the source file JSDoc comments and rerun docgen to update the docs below-->\n\n### impact(...)\n\n```typescript\nimpact(options?: ImpactOptions | undefined) => Promise<void>\n```\n\nTrigger a haptics \"impact\" feedback\n\n| Param         | Type                                                    |\n| ------------- | ------------------------------------------------------- |\n| **`options`** | <code><a href=\"#impactoptions\">ImpactOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### notification(...)\n\n```typescript\nnotification(options?: NotificationOptions | undefined) => Promise<void>\n```\n\nTrigger a haptics \"notification\" feedback\n\n| Param         | Type                                                                |\n| ------------- | ------------------------------------------------------------------- |\n| **`options`** | <code><a href=\"#notificationoptions\">NotificationOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### vibrate(...)\n\n```typescript\nvibrate(options?: VibrateOptions | undefined) => Promise<void>\n```\n\nVibrate the device\n\n| Param         | Type                                                      |\n| ------------- | --------------------------------------------------------- |\n| **`options`** | <code><a href=\"#vibrateoptions\">VibrateOptions</a></code> |\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### selectionStart()\n\n```typescript\nselectionStart() => Promise<void>\n```\n\nTrigger a selection started haptic hint\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### selectionChanged()\n\n```typescript\nselectionChanged() => Promise<void>\n```\n\nTrigger a selection changed haptic hint. If a selection was\nstarted already, this will cause the device to provide haptic\nfeedback\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### selectionEnd()\n\n```typescript\nselectionEnd() => Promise<void>\n```\n\nIf selectionStart() was called, selectionEnd() ends the selection.\nFor example, call this when a user has lifted their finger from a control\n\n**Since:** 1.0.0\n\n--------------------\n\n\n### Interfaces\n\n\n#### ImpactOptions\n\n| Prop        | Type                                                | Description                                                                                                                                                                              | Default                        | Since |\n| ----------- | --------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ | ----- |\n| **`style`** | <code><a href=\"#impactstyle\">ImpactStyle</a></code> | Impact Feedback Style The mass of the objects in the collision simulated by a [UIImpactFeedbackGenerator](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle) object. | <code>ImpactStyle.Heavy</code> | 1.0.0 |\n\n\n#### NotificationOptions\n\n| Prop       | Type                                                          | Description                                                                                                                                                                                       | Default                               | Since |\n| ---------- | ------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------- | ----- |\n| **`type`** | <code><a href=\"#notificationtype\">NotificationType</a></code> | Notification Feedback Type The type of notification feedback generated by a [UINotificationFeedbackGenerator](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype) object. | <code>NotificationType.SUCCESS</code> | 1.0.0 |\n\n\n#### VibrateOptions\n\n| Prop           | Type                | Description                                                      | Default          | Since |\n| -------------- | ------------------- | ---------------------------------------------------------------- | ---------------- | ----- |\n| **`duration`** | <code>number</code> | Duration of the vibration in milliseconds. Not supported in iOS. | <code>300</code> | 1.0.0 |\n\n\n### Enums\n\n\n#### ImpactStyle\n\n| Members      | Value                 | Description                                                  | Since |\n| ------------ | --------------------- | ------------------------------------------------------------ | ----- |\n| **`Heavy`**  | <code>'HEAVY'</code>  | A collision between small, light user interface elements     | 1.0.0 |\n| **`Medium`** | <code>'MEDIUM'</code> | A collision between moderately sized user interface elements | 1.0.0 |\n| **`Light`**  | <code>'LIGHT'</code>  | A collision between small, light user interface elements     | 1.0.0 |\n\n\n#### NotificationType\n\n| Members       | Value                  | Description                                                                    | Since |\n| ------------- | ---------------------- | ------------------------------------------------------------------------------ | ----- |\n| **`Success`** | <code>'SUCCESS'</code> | A notification feedback type indicating that a task has completed successfully | 1.0.0 |\n| **`Warning`** | <code>'WARNING'</code> | A notification feedback type indicating that a task has produced a warning     | 1.0.0 |\n| **`Error`**   | <code>'ERROR'</code>   | A notification feedback type indicating that a task has failed                 | 1.0.0 |\n\n</docgen-api>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ionic-team/capacitor-plugins.git"
  },
  "scripts": {
    "build": "npm run clean && npm run docgen && tsc && rollup -c rollup.config.js",
    "clean": "rimraf ./dist",
    "docgen": "docgen --api HapticsPlugin --output-readme README.md --output-json dist/docs.json",
    "eslint": "eslint . --ext ts",
    "fmt": "npm run eslint -- --fix && npm run prettier -- --write && npm run swiftlint -- autocorrect --format",
    "lint": "npm run eslint && npm run prettier -- --check && npm run swiftlint -- lint",
    "postpublish": "npm run publish:cocoapod",
    "prepublishOnly": "npm run build",
    "prettier": "prettier \"**/*.{css,html,ts,js,java}\"",
    "publish:cocoapod": "pod trunk push ./CapacitorHaptics.podspec --allow-warnings",
    "swiftlint": "node-swiftlint",
    "verify": "npm run verify:ios && npm run verify:android && npm run verify:web",
    "verify:android": "cd android && ./gradlew clean build test && cd ..",
    "verify:ios": "cd ios && pod install && xcodebuild -workspace Plugin.xcworkspace -scheme Plugin && cd ..",
    "verify:web": "npm run build",
    "watch": "tsc --watch"
  },
  "swiftlint": "@ionic/swiftlint-config",
  "types": "dist/esm/index.d.ts",
  "unpkg": "dist/plugin.js",
  "version": "1.0.3"
}
