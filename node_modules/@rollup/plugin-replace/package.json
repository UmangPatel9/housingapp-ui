{
  "_args": [
    [
      {
        "raw": "@rollup/plugin-replace@^2.3.1",
        "scope": "@rollup",
        "escapedName": "@rollup%2fplugin-replace",
        "name": "@rollup/plugin-replace",
        "rawSpec": "^2.3.1",
        "spec": ">=2.3.1 <3.0.0",
        "type": "range"
      },
      "G:\\Umang\\Housing app\\react app\\housingapp-ui\\node_modules\\workbox-build"
    ]
  ],
  "_from": "@rollup/plugin-replace@^2.3.1",
  "_hasShrinkwrap": false,
  "_id": "@rollup/plugin-replace@2.4.2",
  "_location": "/@rollup/plugin-replace",
  "_nodeVersion": "12.18.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plugin-replace_2.4.2_1616784347177_0.8370490505382946"
  },
  "_npmUser": {
    "name": "shellscape",
    "email": "andrew@shellscape.org"
  },
  "_npmVersion": "6.14.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@rollup/plugin-replace@^2.3.1",
    "scope": "@rollup",
    "escapedName": "@rollup%2fplugin-replace",
    "name": "@rollup/plugin-replace",
    "rawSpec": "^2.3.1",
    "spec": ">=2.3.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/workbox-build"
  ],
  "_resolved": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
  "_shasum": "a2d539314fbc77c244858faa523012825068510a",
  "_shrinkwrap": null,
  "_spec": "@rollup/plugin-replace@^2.3.1",
  "_where": "G:\\Umang\\Housing app\\react app\\housingapp-ui\\node_modules\\workbox-build",
  "author": {
    "name": "Rich Harris",
    "email": "richard.a.harris@gmail.com"
  },
  "ava": {
    "babel": {
      "compileEnhancements": false
    },
    "files": [
      "!**/fixtures/**",
      "!**/helpers/**",
      "!**/recipes/**",
      "!**/types.ts"
    ]
  },
  "bugs": {
    "url": "https://github.com/rollup/plugins/issues"
  },
  "dependencies": {
    "@rollup/pluginutils": "^3.1.0",
    "magic-string": "^0.25.7"
  },
  "description": "Replace strings in files while bundling",
  "devDependencies": {
    "@rollup/plugin-buble": "^0.21.3",
    "del-cli": "^3.0.1",
    "locate-character": "^2.0.5",
    "rollup": "^2.23.0",
    "source-map": "^0.7.3",
    "typescript": "^3.9.7"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-IGcu+cydlUMZ5En85jxHH4qj2hta/11BHq95iHEyb2sbgiN0eCdzvUcHw5gt9pBL5lTi4JDYJ1acCoMGpTvEZg==",
    "shasum": "a2d539314fbc77c244858faa523012825068510a",
    "tarball": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
    "fileCount": 8,
    "unpackedSize": 21519,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXivbCRA9TVsSAnZWagAAhaUP/2K36S8GgN6HrfmjdjTF\nSTwuDA0HbG6IFh8CR+vj4VU/YIwt3/K60VkYwVcizBPY5csWPHfWs6sJx8yT\nqz6kCRUUu2xogwF6c80jrfRLkJQnBLG+kwpQx8Vp+AdP4DCBo5w1kXPMb2rS\nyaxLi9l5w08thn4WfB8LSubtmkhu6ced9WgUp09A0/SMePNIIN59rPpUntnu\nJcqA/VJJvM0dfjZZ4NwdH06WppIeSpDDGy1ayyokGrBDnmq5/b9pfUXuqora\nI+EhzNECH9XheT5DvDfzwNWBOArxSXm1EJeJEFOR858FzGiKPti87jfMMQtg\ncQ+RZvV7iBgxG8ckr0ymbM/TAzweX08vc5fjRMNMR/SjsDALuTlAH7o1GwbE\npup+lN2NXzewA6iy++J++eF5IZbS8VvoLFTrXETSP6jvtsLQeeLWr7Q3hOLM\nP0ehyuZO4NqOMkDQb4Rgj+8qqjchIuGESpFJvFOrsJGN/Q+/BVXMpW3/ao2L\nl56tk2qZkYTvteLf5ClENz4AIxrrYGM+IY28uIBzifAlBxq7a0Lnxwwyckgb\nYuuF75uwcf0j2bhs17dP5w6r1jiwa9xD+s6K9ULXkTKabKdWQXzyWYL9YvJa\nf3R4YKNFkD8aSR3AJX3IuSSW/rp/f9Bpyo3jsESBeGzaXZl5BucJXt+0Bdpr\nsogp\r\n=Sh2q\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "src",
    "types",
    "README.md"
  ],
  "homepage": "https://github.com/rollup/plugins/tree/master/packages/replace#readme",
  "keywords": [
    "rollup",
    "plugin",
    "replace",
    "es2015",
    "npm",
    "modules"
  ],
  "license": "MIT",
  "main": "dist/rollup-plugin-replace.cjs.js",
  "maintainers": [
    {
      "name": "shellscape",
      "email": "andrew@shellscape.org"
    },
    {
      "name": "rich_harris",
      "email": "richard.a.harris@gmail.com"
    },
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    },
    {
      "name": "lukastaegert",
      "email": "lukas.taegert@tngtech.com"
    }
  ],
  "module": "dist/rollup-plugin-replace.es.js",
  "name": "@rollup/plugin-replace",
  "optionalDependencies": {},
  "peerDependencies": {
    "rollup": "^1.20.0 || ^2.0.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "[npm]: https://img.shields.io/npm/v/@rollup/plugin-replace\n[npm-url]: https://www.npmjs.com/package/@rollup/plugin-replace\n[size]: https://packagephobia.now.sh/badge?p=@rollup/plugin-replace\n[size-url]: https://packagephobia.now.sh/result?p=@rollup/plugin-replace\n\n[![npm][npm]][npm-url]\n[![size][size]][size-url]\n[![libera manifesto](https://img.shields.io/badge/libera-manifesto-lightgrey.svg)](https://liberamanifesto.com)\n\n# @rollup/plugin-replace\n\n🍣 A Rollup plugin which replaces targeted strings in files while bundling.\n\n## Requirements\n\nThis plugin requires an [LTS](https://github.com/nodejs/Release) Node version (v8.0.0+) and Rollup v1.20.0+.\n\n## Install\n\nUsing npm:\n\n```console\nnpm install @rollup/plugin-replace --save-dev\n```\n\n## Usage\n\nCreate a `rollup.config.js` [configuration file](https://www.rollupjs.org/guide/en/#configuration-files) and import the plugin:\n\n```js\nimport replace from '@rollup/plugin-replace';\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    dir: 'output',\n    format: 'cjs'\n  },\n  plugins: [\n    replace({\n      'process.env.NODE_ENV': JSON.stringify('production'),\n      __buildDate__: () => JSON.stringify(new Date()),\n      __buildVersion: 15\n    })\n  ]\n};\n```\n\nThen call `rollup` either via the [CLI](https://www.rollupjs.org/guide/en/#command-line-reference) or the [API](https://www.rollupjs.org/guide/en/#javascript-api).\n\nThe configuration above will replace every instance of `process.env.NODE_ENV` with `\"production\"` and `__buildDate__` with the result of the given function in any file included in the build.\n\n_Note: Values must be either primitives (e.g. string, number) or `function` that returns a string. For complex values, use `JSON.stringify`. To replace a target with a value that will be evaluated as a string, set the value to a quoted string (e.g. `\"test\"`) or use `JSON.stringify` to preprocess the target string safely._\n\nTypically, `@rollup/plugin-replace` should be placed in `plugins` _before_ other plugins so that they may apply optimizations, such as dead code removal.\n\n## Options\n\nIn addition to the properties and values specified for replacement, users may also specify the options below.\n\n### `delimiters`\n\nType: `Array[...String, String]`<br>\nDefault: `['\\b', '\\b']`\n\nSpecifies the boundaries around which strings will be replaced. By default, delimiters are [word boundaries](https://www.regular-expressions.info/wordboundaries.html). See [Word Boundaries](#word-boundaries) below for more information.\n\n### `preventAssignment`\n\nType: `Boolean`<br>\nDefault: `false`\n\nPrevents replacing strings where they are followed by a single equals sign. For example, where the plugin is called as follows:\n\n```js\nreplace({\n  values: {\n    'process.env.DEBUG': 'false'\n  }\n});\n```\n\nObserve the following code:\n\n```js\n// Input\nprocess.env.DEBUG = false;\nif (process.env.DEBUG == true) {\n  //\n}\n// Without `preventAssignment`\nfalse = false; // this throws an error because false cannot be assigned to\nif (false == true) {\n  //\n}\n// With `preventAssignment`\nprocess.env.DEBUG = false;\nif (false == true) {\n  //\n}\n```\n\n### `exclude`\n\nType: `String` | `Array[...String]`<br>\nDefault: `null`\n\nA [minimatch pattern](https://github.com/isaacs/minimatch), or array of patterns, which specifies the files in the build the plugin should _ignore_. By default no files are ignored.\n\n### `include`\n\nType: `String` | `Array[...String]`<br>\nDefault: `null`\n\nA [minimatch pattern](https://github.com/isaacs/minimatch), or array of patterns, which specifies the files in the build the plugin should operate on. By default all files are targeted.\n\n### `values`\n\nType: `{ [key: String]: Replacement }`, where `Replacement` is either a string or a `function` that returns a string.\nDefault: `{}`\n\nTo avoid mixing replacement strings with the other options, you can specify replacements in the `values` option. For example, the following signature:\n\n```js\nreplace({\n  include: ['src/**/*.js'],\n  changed: 'replaced'\n});\n```\n\nCan be replaced with:\n\n```js\nreplace({\n  include: ['src/**/*.js'],\n  values: {\n    changed: 'replaced'\n  }\n});\n```\n\n## Word Boundaries\n\nBy default, values will only match if they are surrounded by _word boundaries_.\n\nConsider the following options and build file:\n\n```js\nmodule.exports = {\n  ...\n  plugins: [replace({ changed: 'replaced' })]\n};\n```\n\n```js\n// file.js\nconsole.log('changed');\nconsole.log('unchanged');\n```\n\nThe result would be:\n\n```js\n// file.js\nconsole.log('replaced');\nconsole.log('unchanged');\n```\n\nTo ignore word boundaries and replace every instance of the string, wherever it may be, specify empty strings as delimiters:\n\n```js\nexport default {\n  ...\n  plugins: [\n    replace({\n      changed: 'replaced',\n      delimiters: ['', '']\n    })\n  ]\n};\n```\n\n## Meta\n\n[CONTRIBUTING](/.github/CONTRIBUTING.md)\n\n[LICENSE (MIT)](/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/plugins.git"
  },
  "scripts": {
    "build": "rollup -c",
    "ci:coverage": "nyc pnpm run test && nyc report --reporter=text-lcov > coverage.lcov",
    "ci:lint": "pnpm run build && pnpm run lint",
    "ci:lint:commits": "commitlint --from=${CIRCLE_BRANCH} --to=${CIRCLE_SHA1}",
    "ci:test": "pnpm run test -- --verbose && pnpm run test:ts",
    "lint": "pnpm run lint:js && pnpm run lint:docs && pnpm run lint:package",
    "lint:docs": "prettier --single-quote --arrow-parens avoid --trailing-comma none --write README.md",
    "lint:js": "eslint --fix --cache src test types --ext .js,.ts",
    "lint:package": "prettier --write package.json --plugin=prettier-plugin-package",
    "prebuild": "del-cli dist",
    "prepare": "pnpm run build",
    "prepublishOnly": "pnpm run lint && pnpm run test",
    "pretest": "pnpm run build",
    "test": "ava",
    "test:ts": "tsc types/index.d.ts test/types.ts --noEmit"
  },
  "types": "types/index.d.ts",
  "version": "2.4.2"
}
